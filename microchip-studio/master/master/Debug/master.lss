
master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000017c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009bf  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000067f  00000000  00000000  00000c7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000506  00000000  00000000  000012fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00001800  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ea  00000000  00000000  000018e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002f0  00000000  00000000  00001cca  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00001fba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	5e d0       	rcall	.+188    	; 0xf0 <main>
  34:	a1 c0       	rjmp	.+322    	; 0x178 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <i2c_master_init>:
	TWCR = (1<<TWEN) | (1<<TWINT) | (1<<TWEA);
	// Wait until TWI finish its current job
	while(!(TWCR&(1<<TWINT)));
	// Return received data
	return TWDR;
}
  38:	11 b8       	out	0x01, r1	; 1
  3a:	80 e2       	ldi	r24, 0x20	; 32
  3c:	80 b9       	out	0x00, r24	; 0
  3e:	08 95       	ret

00000040 <i2c_master_start>:
  40:	94 ea       	ldi	r25, 0xA4	; 164
  42:	96 bf       	out	0x36, r25	; 54
  44:	06 b6       	in	r0, 0x36	; 54
  46:	07 fe       	sbrs	r0, 7
  48:	fd cf       	rjmp	.-6      	; 0x44 <i2c_master_start+0x4>
  4a:	91 b1       	in	r25, 0x01	; 1
  4c:	98 7f       	andi	r25, 0xF8	; 248
  4e:	98 30       	cpi	r25, 0x08	; 8
  50:	71 f4       	brne	.+28     	; 0x6e <i2c_master_start+0x2e>
  52:	83 b9       	out	0x03, r24	; 3
  54:	84 e8       	ldi	r24, 0x84	; 132
  56:	86 bf       	out	0x36, r24	; 54
  58:	06 b6       	in	r0, 0x36	; 54
  5a:	07 fe       	sbrs	r0, 7
  5c:	fd cf       	rjmp	.-6      	; 0x58 <i2c_master_start+0x18>
  5e:	81 b1       	in	r24, 0x01	; 1
  60:	88 7f       	andi	r24, 0xF8	; 248
  62:	88 31       	cpi	r24, 0x18	; 24
  64:	31 f0       	breq	.+12     	; 0x72 <i2c_master_start+0x32>
  66:	80 32       	cpi	r24, 0x20	; 32
  68:	31 f4       	brne	.+12     	; 0x76 <i2c_master_start+0x36>
  6a:	82 e0       	ldi	r24, 0x02	; 2
  6c:	08 95       	ret
  6e:	80 e0       	ldi	r24, 0x00	; 0
  70:	08 95       	ret
  72:	81 e0       	ldi	r24, 0x01	; 1
  74:	08 95       	ret
  76:	83 e0       	ldi	r24, 0x03	; 3
  78:	08 95       	ret

0000007a <i2c_master_write>:
  7a:	83 b9       	out	0x03, r24	; 3
  7c:	84 e8       	ldi	r24, 0x84	; 132
  7e:	86 bf       	out	0x36, r24	; 54
  80:	06 b6       	in	r0, 0x36	; 54
  82:	07 fe       	sbrs	r0, 7
  84:	fd cf       	rjmp	.-6      	; 0x80 <i2c_master_write+0x6>
  86:	81 b1       	in	r24, 0x01	; 1
  88:	88 7f       	andi	r24, 0xF8	; 248
  8a:	88 32       	cpi	r24, 0x28	; 40
  8c:	21 f0       	breq	.+8      	; 0x96 <i2c_master_write+0x1c>
  8e:	80 33       	cpi	r24, 0x30	; 48
  90:	21 f4       	brne	.+8      	; 0x9a <i2c_master_write+0x20>
  92:	81 e0       	ldi	r24, 0x01	; 1
  94:	08 95       	ret
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	08 95       	ret
  9a:	82 e0       	ldi	r24, 0x02	; 2
  9c:	08 95       	ret

0000009e <i2c_master_readNack>:

char i2c_master_readNack()
{
	// Enable TWI and clear interrupt flag
	TWCR = (1<<TWEN) | (1<<TWINT);
  9e:	84 e8       	ldi	r24, 0x84	; 132
  a0:	86 bf       	out	0x36, r24	; 54
	// Wait until TWI finish its current job
	while(!(TWCR&(1<<TWINT)));
  a2:	06 b6       	in	r0, 0x36	; 54
  a4:	07 fe       	sbrs	r0, 7
  a6:	fd cf       	rjmp	.-6      	; 0xa2 <i2c_master_readNack+0x4>
	// Return received data */
	return TWDR;
  a8:	83 b1       	in	r24, 0x03	; 3
}
  aa:	08 95       	ret

000000ac <i2c_master_stop>:

void i2c_master_stop()
{
	// Enable TWI, generate stop
	TWCR = (1<<TWSTO) | (1<<TWINT) | (1<<TWEN);
  ac:	84 e9       	ldi	r24, 0x94	; 148
  ae:	86 bf       	out	0x36, r24	; 54
	// Wait until stop condition execution
	while(TWCR&(1<<TWSTO));
  b0:	06 b6       	in	r0, 0x36	; 54
  b2:	04 fc       	sbrc	r0, 4
  b4:	fd cf       	rjmp	.-6      	; 0xb0 <i2c_master_stop+0x4>
}
  b6:	08 95       	ret

000000b8 <i2c_master_isDeviceReady>:

uint8_t i2c_master_isDeviceReady(char address)
{
  b8:	cf 93       	push	r28
	i2c_master_start(address);
  ba:	c2 df       	rcall	.-124    	; 0x40 <i2c_master_start>
	
	uint8_t status = TWSR & 0xF8;
  bc:	c1 b1       	in	r28, 0x01	; 1
  be:	c8 7f       	andi	r28, 0xF8	; 248
	
	i2c_master_stop();
  c0:	f5 df       	rcall	.-22     	; 0xac <i2c_master_stop>
	
	// status == 0x18 , Check for SLA+W transmitted & ack received
	if(status == 0x18) return 1;
  c2:	c8 31       	cpi	r28, 0x18	; 24
  c4:	11 f4       	brne	.+4      	; 0xca <i2c_master_isDeviceReady+0x12>
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	01 c0       	rjmp	.+2      	; 0xcc <i2c_master_isDeviceReady+0x14>
	
	// status == 0x20 , Check for SLA+W transmitted &nack received
	else if(status == 0x20) return 0;
  ca:	80 e0       	ldi	r24, 0x00	; 0
	
	else return 0;
}
  cc:	cf 91       	pop	r28
  ce:	08 95       	ret

000000d0 <i2c_master_transmit>:

void i2c_master_transmit(char address, uint8_t data)
{
  d0:	cf 93       	push	r28
  d2:	c6 2f       	mov	r28, r22
	i2c_master_start(address);
  d4:	b5 df       	rcall	.-150    	; 0x40 <i2c_master_start>
	i2c_master_write(data);
  d6:	8c 2f       	mov	r24, r28
  d8:	d0 df       	rcall	.-96     	; 0x7a <i2c_master_write>
	i2c_master_stop();
  da:	e8 df       	rcall	.-48     	; 0xac <i2c_master_stop>
}
  dc:	cf 91       	pop	r28
  de:	08 95       	ret

000000e0 <i2c_master_receive>:

uint8_t i2c_master_receive(char address)
{
  e0:	cf 93       	push	r28
	i2c_master_start(address);
  e2:	ae df       	rcall	.-164    	; 0x40 <i2c_master_start>
	uint8_t result = i2c_master_readNack();
  e4:	dc df       	rcall	.-72     	; 0x9e <i2c_master_readNack>
  e6:	c8 2f       	mov	r28, r24
	i2c_master_stop();
  e8:	e1 df       	rcall	.-62     	; 0xac <i2c_master_stop>
	return result;
  ea:	8c 2f       	mov	r24, r28
  ec:	cf 91       	pop	r28
  ee:	08 95       	ret

000000f0 <main>:
#include <util/delay.h>
#include "i2cMaster/i2cMaster.h"

int main(void)
{
	DDRB = 0xFF;
  f0:	8f ef       	ldi	r24, 0xFF	; 255
  f2:	87 bb       	out	0x17, r24	; 23
	
	// init i2c as master
	i2c_master_init();
  f4:	a1 df       	rcall	.-190    	; 0x38 <i2c_master_init>
	
	while(1)
	{
		// check whether the slave with address 74 is ready
		if(i2c_master_isDeviceReady(74))
  f6:	8a e4       	ldi	r24, 0x4A	; 74
  f8:	df df       	rcall	.-66     	; 0xb8 <i2c_master_isDeviceReady>
  fa:	88 23       	and	r24, r24
  fc:	e1 f3       	breq	.-8      	; 0xf6 <main+0x6>
			// write data to the slave with address 74, 74 as write
			// ~(1 << 4)
			// ~(00010000)
			// 11101111
			// I use pull up mode
			i2c_master_transmit(74, ~(1 << 4));
  fe:	6f ee       	ldi	r22, 0xEF	; 239
 100:	8a e4       	ldi	r24, 0x4A	; 74
 102:	e6 df       	rcall	.-52     	; 0xd0 <i2c_master_transmit>
			// read data from slave with address 75, 75 as read
			PORTB = i2c_master_receive(75);
 104:	8b e4       	ldi	r24, 0x4B	; 75
 106:	ec df       	rcall	.-40     	; 0xe0 <i2c_master_receive>
 108:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10a:	2f ef       	ldi	r18, 0xFF	; 255
 10c:	82 e5       	ldi	r24, 0x52	; 82
 10e:	97 e0       	ldi	r25, 0x07	; 7
 110:	21 50       	subi	r18, 0x01	; 1
 112:	80 40       	sbci	r24, 0x00	; 0
 114:	90 40       	sbci	r25, 0x00	; 0
 116:	e1 f7       	brne	.-8      	; 0x110 <main+0x20>
 118:	00 c0       	rjmp	.+0      	; 0x11a <main+0x2a>
 11a:	00 00       	nop
			_delay_ms(300);
			
			i2c_master_transmit(74, ~(1 << 5));
 11c:	6f ed       	ldi	r22, 0xDF	; 223
 11e:	8a e4       	ldi	r24, 0x4A	; 74
 120:	d7 df       	rcall	.-82     	; 0xd0 <i2c_master_transmit>
			PORTB = i2c_master_receive(75);
 122:	8b e4       	ldi	r24, 0x4B	; 75
 124:	dd df       	rcall	.-70     	; 0xe0 <i2c_master_receive>
 126:	88 bb       	out	0x18, r24	; 24
 128:	2f ef       	ldi	r18, 0xFF	; 255
 12a:	82 e5       	ldi	r24, 0x52	; 82
 12c:	97 e0       	ldi	r25, 0x07	; 7
 12e:	21 50       	subi	r18, 0x01	; 1
 130:	80 40       	sbci	r24, 0x00	; 0
 132:	90 40       	sbci	r25, 0x00	; 0
 134:	e1 f7       	brne	.-8      	; 0x12e <main+0x3e>
 136:	00 c0       	rjmp	.+0      	; 0x138 <main+0x48>
 138:	00 00       	nop
			_delay_ms(300);
			
			i2c_master_transmit(74, ~(1 << 6));
 13a:	6f eb       	ldi	r22, 0xBF	; 191
 13c:	8a e4       	ldi	r24, 0x4A	; 74
 13e:	c8 df       	rcall	.-112    	; 0xd0 <i2c_master_transmit>
			PORTB = i2c_master_receive(75);
 140:	8b e4       	ldi	r24, 0x4B	; 75
 142:	ce df       	rcall	.-100    	; 0xe0 <i2c_master_receive>
 144:	88 bb       	out	0x18, r24	; 24
 146:	2f ef       	ldi	r18, 0xFF	; 255
 148:	82 e5       	ldi	r24, 0x52	; 82
 14a:	97 e0       	ldi	r25, 0x07	; 7
 14c:	21 50       	subi	r18, 0x01	; 1
 14e:	80 40       	sbci	r24, 0x00	; 0
 150:	90 40       	sbci	r25, 0x00	; 0
 152:	e1 f7       	brne	.-8      	; 0x14c <main+0x5c>
 154:	00 c0       	rjmp	.+0      	; 0x156 <main+0x66>
 156:	00 00       	nop
			_delay_ms(300);
			
			i2c_master_transmit(74, ~(1 << 7));
 158:	6f e7       	ldi	r22, 0x7F	; 127
 15a:	8a e4       	ldi	r24, 0x4A	; 74
 15c:	b9 df       	rcall	.-142    	; 0xd0 <i2c_master_transmit>
			PORTB = i2c_master_receive(75);
 15e:	8b e4       	ldi	r24, 0x4B	; 75
 160:	bf df       	rcall	.-130    	; 0xe0 <i2c_master_receive>
 162:	88 bb       	out	0x18, r24	; 24
 164:	2f ef       	ldi	r18, 0xFF	; 255
 166:	82 e5       	ldi	r24, 0x52	; 82
 168:	97 e0       	ldi	r25, 0x07	; 7
 16a:	21 50       	subi	r18, 0x01	; 1
 16c:	80 40       	sbci	r24, 0x00	; 0
 16e:	90 40       	sbci	r25, 0x00	; 0
 170:	e1 f7       	brne	.-8      	; 0x16a <main+0x7a>
 172:	00 c0       	rjmp	.+0      	; 0x174 <main+0x84>
 174:	00 00       	nop
 176:	bf cf       	rjmp	.-130    	; 0xf6 <main+0x6>

00000178 <_exit>:
 178:	f8 94       	cli

0000017a <__stop_program>:
 17a:	ff cf       	rjmp	.-2      	; 0x17a <__stop_program>
