
slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000116  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000016a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000016a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000019c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006d1  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005b3  00000000  00000000  00000901  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003fe  00000000  00000000  00000eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  000012b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000337  00000000  00000000  0000132c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000141  00000000  00000000  00001663  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000017a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	5f d0       	rcall	.+190    	; 0xf2 <main>
  34:	6e c0       	rjmp	.+220    	; 0x112 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <i2c_slave_init>:
#include "i2cSlave.h"

void i2c_slave_init(uint8_t address)
{
	// Assign Address in TWI address register
	TWAR = address;
  38:	82 b9       	out	0x02, r24	; 2
	// Enable TWI, Enable ack generation
	TWCR = (1 << TWEN) | (1 << TWEA) | (1 << TWINT);
  3a:	84 ec       	ldi	r24, 0xC4	; 196
  3c:	86 bf       	out	0x36, r24	; 54
  3e:	08 95       	ret

00000040 <i2c_slave_listen>:
	{
		// Declare variable
		uint8_t status;
		
		// Wait to be addressed
		while(!(TWCR & (1 << TWINT)));
  40:	06 b6       	in	r0, 0x36	; 54
  42:	07 fe       	sbrs	r0, 7
  44:	fd cf       	rjmp	.-6      	; 0x40 <i2c_slave_listen>
		// Read TWI status register
		status = TWSR & 0xF8;
  46:	81 b1       	in	r24, 0x01	; 1
  48:	88 7f       	andi	r24, 0xF8	; 248
		
		// Own SLA+W received &ack returned
		// Return 0 to indicate ack returned
		if(status == 0x60||status == 0x68) return 0;
  4a:	80 36       	cpi	r24, 0x60	; 96
  4c:	61 f0       	breq	.+24     	; 0x66 <i2c_slave_listen+0x26>
  4e:	88 36       	cpi	r24, 0x68	; 104
  50:	61 f0       	breq	.+24     	; 0x6a <i2c_slave_listen+0x2a>
		// Own SLA+R received &ack returned
		// Return 0 to indicate ack returned */
		else if(status == 0xA8||status == 0xB0) return 1;
  52:	88 3a       	cpi	r24, 0xA8	; 168
  54:	61 f0       	breq	.+24     	; 0x6e <i2c_slave_listen+0x2e>
  56:	80 3b       	cpi	r24, 0xB0	; 176
  58:	61 f0       	breq	.+24     	; 0x72 <i2c_slave_listen+0x32>
		// General call received &ack returned
		// Return 1 to indicate ack returned
		else if(status == 0x70||status == 0x78) return 2;
  5a:	80 37       	cpi	r24, 0x70	; 112
  5c:	61 f0       	breq	.+24     	; 0x76 <i2c_slave_listen+0x36>
  5e:	88 37       	cpi	r24, 0x78	; 120
  60:	79 f7       	brne	.-34     	; 0x40 <i2c_slave_listen>
  62:	82 e0       	ldi	r24, 0x02	; 2
  64:	08 95       	ret
		// Read TWI status register
		status = TWSR & 0xF8;
		
		// Own SLA+W received &ack returned
		// Return 0 to indicate ack returned
		if(status == 0x60||status == 0x68) return 0;
  66:	80 e0       	ldi	r24, 0x00	; 0
  68:	08 95       	ret
  6a:	80 e0       	ldi	r24, 0x00	; 0
  6c:	08 95       	ret
		// Own SLA+R received &ack returned
		// Return 0 to indicate ack returned */
		else if(status == 0xA8||status == 0xB0) return 1;
  6e:	81 e0       	ldi	r24, 0x01	; 1
  70:	08 95       	ret
  72:	81 e0       	ldi	r24, 0x01	; 1
  74:	08 95       	ret
		// General call received &ack returned
		// Return 1 to indicate ack returned
		else if(status == 0x70||status == 0x78) return 2;
  76:	82 e0       	ldi	r24, 0x02	; 2
		// Else continue
		else continue;
	}
}
  78:	08 95       	ret

0000007a <i2c_slave_transmit>:
{
	// Declare variable
	uint8_t status;
	
	// Write data to TWDR to be transmitted
	TWDR = data;
  7a:	83 b9       	out	0x03, r24	; 3
	// Enable TWI & clear interrupt flag & Ack Generator
	TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWEA);
  7c:	84 ec       	ldi	r24, 0xC4	; 196
  7e:	86 bf       	out	0x36, r24	; 54
	// Wait until TWI finish its current job
	while(!(TWCR & (1 << TWINT)));
  80:	06 b6       	in	r0, 0x36	; 54
  82:	07 fe       	sbrs	r0, 7
  84:	fd cf       	rjmp	.-6      	; 0x80 <i2c_slave_transmit+0x6>
	
	// Read TWI status register
	status = TWSR & 0xF8;
  86:	81 b1       	in	r24, 0x01	; 1
  88:	88 7f       	andi	r24, 0xF8	; 248
	// Check for STOP/REPEATED START received
	if(status == 0xA0)
  8a:	80 3a       	cpi	r24, 0xA0	; 160
  8c:	29 f4       	brne	.+10     	; 0x98 <i2c_slave_transmit+0x1e>
	{
		// Clear interrupt flag & return -1
		TWCR |= 1 << TWINT;
  8e:	86 b7       	in	r24, 0x36	; 54
  90:	80 68       	ori	r24, 0x80	; 128
  92:	86 bf       	out	0x36, r24	; 54
		return -1;
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	08 95       	ret
	}
	// Check for data transmitted & ack received
	// If yes then return 0
	if(status == 0xB8) return 0;
  98:	88 3b       	cpi	r24, 0xB8	; 184
  9a:	59 f0       	breq	.+22     	; 0xb2 <i2c_slave_transmit+0x38>
	// Check for data transmitted &nack received
	if(status == 0xC0)
  9c:	80 3c       	cpi	r24, 0xC0	; 192
  9e:	29 f4       	brne	.+10     	; 0xaa <i2c_slave_transmit+0x30>
	{
		// Clear interrupt flag & return -2s
		TWCR |= 1 << TWINT;
  a0:	86 b7       	in	r24, 0x36	; 54
  a2:	80 68       	ori	r24, 0x80	; 128
  a4:	86 bf       	out	0x36, r24	; 54
		return -2;
  a6:	8e ef       	ldi	r24, 0xFE	; 254
  a8:	08 95       	ret
	}
	// Last byte transmitted with ack received
	// If yes then return -3
	if(status == 0xC8) return -3;
  aa:	88 3c       	cpi	r24, 0xC8	; 200
  ac:	21 f4       	brne	.+8      	; 0xb6 <i2c_slave_transmit+0x3c>
  ae:	8d ef       	ldi	r24, 0xFD	; 253
  b0:	08 95       	ret
		TWCR |= 1 << TWINT;
		return -1;
	}
	// Check for data transmitted & ack received
	// If yes then return 0
	if(status == 0xB8) return 0;
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	08 95       	ret
	}
	// Last byte transmitted with ack received
	// If yes then return -3
	if(status == 0xC8) return -3;
	// else return -4
	else return -4;
  b6:	8c ef       	ldi	r24, 0xFC	; 252
}
  b8:	08 95       	ret

000000ba <i2c_slave_receive>:
{
	// Declare variable
	uint8_t status;
	
	// Enable TWI & generation of ack
	TWCR = (1 << TWEN) | (1 << TWEA) | (1 << TWINT);
  ba:	84 ec       	ldi	r24, 0xC4	; 196
  bc:	86 bf       	out	0x36, r24	; 54
	// Wait until TWI finish its current job
	while(!(TWCR & (1 << TWINT)));
  be:	06 b6       	in	r0, 0x36	; 54
  c0:	07 fe       	sbrs	r0, 7
  c2:	fd cf       	rjmp	.-6      	; 0xbe <i2c_slave_receive+0x4>
	
	// Read TWI status register
	status = TWSR & 0xF8;
  c4:	81 b1       	in	r24, 0x01	; 1
  c6:	88 7f       	andi	r24, 0xF8	; 248
	// Check for data received &ack returned
	// If yes then return received data
	if(status == 0x80 || status == 0x90) return TWDR;
  c8:	80 38       	cpi	r24, 0x80	; 128
  ca:	11 f0       	breq	.+4      	; 0xd0 <i2c_slave_receive+0x16>
  cc:	80 39       	cpi	r24, 0x90	; 144
  ce:	11 f4       	brne	.+4      	; 0xd4 <i2c_slave_receive+0x1a>
  d0:	83 b1       	in	r24, 0x03	; 3
  d2:	08 95       	ret
	// Check for data received, nack returned & switched to not addressed slave mode
	// If yes then return received data
	else if(status == 0x88 || status == 0x98) return TWDR;
  d4:	88 38       	cpi	r24, 0x88	; 136
  d6:	11 f0       	breq	.+4      	; 0xdc <i2c_slave_receive+0x22>
  d8:	88 39       	cpi	r24, 0x98	; 152
  da:	11 f4       	brne	.+4      	; 0xe0 <i2c_slave_receive+0x26>
  dc:	83 b1       	in	r24, 0x03	; 3
  de:	08 95       	ret
	// Check wether STOP/REPEATED START
	else if(status == 0xA0)
  e0:	80 3a       	cpi	r24, 0xA0	; 160
  e2:	29 f4       	brne	.+10     	; 0xee <i2c_slave_receive+0x34>
	{
		// Clear interrupt flag & return -1
		TWCR|=(1<<TWINT);
  e4:	86 b7       	in	r24, 0x36	; 54
  e6:	80 68       	ori	r24, 0x80	; 128
  e8:	86 bf       	out	0x36, r24	; 54
		return -1;
  ea:	8f ef       	ldi	r24, 0xFF	; 255
  ec:	08 95       	ret
	}
	// Else return -2
	else return -2;
  ee:	8e ef       	ldi	r24, 0xFE	; 254
  f0:	08 95       	ret

000000f2 <main>:
int main(void)
{
	uint8_t result = 0;
	
	// PB0 - PB3 as input, PB4 - PB7 as output
	DDRB = 0xF0;
  f2:	80 ef       	ldi	r24, 0xF0	; 240
  f4:	87 bb       	out	0x17, r24	; 23
	// activate pull up on PB0 - PB3, and write logic high on PB4 - PB7
	PORTB = 0xFF;
  f6:	8f ef       	ldi	r24, 0xFF	; 255
  f8:	88 bb       	out	0x18, r24	; 24
	
	// init i2c as slave, with write address 74 and read address 75
	i2c_slave_init(74);
  fa:	8a e4       	ldi	r24, 0x4A	; 74
  fc:	9d df       	rcall	.-198    	; 0x38 <i2c_slave_init>
	
	while(1)
	{
		// result = 0 , master makes slave as write
		// result = 1 , master makes slave as read
		result = i2c_slave_listen();
  fe:	a0 df       	rcall	.-192    	; 0x40 <i2c_slave_listen>
		
		// when it is made read, the slave's job is to transmit data
		if(result) i2c_slave_transmit(PINB | 0xF0);
 100:	88 23       	and	r24, r24
 102:	21 f0       	breq	.+8      	; 0x10c <main+0x1a>
 104:	86 b3       	in	r24, 0x16	; 22
 106:	80 6f       	ori	r24, 0xF0	; 240
 108:	b8 df       	rcall	.-144    	; 0x7a <i2c_slave_transmit>
 10a:	f9 cf       	rjmp	.-14     	; 0xfe <main+0xc>
		// when it is written, the slave's job is to receive data
		else PORTB = i2c_slave_receive();
 10c:	d6 df       	rcall	.-84     	; 0xba <i2c_slave_receive>
 10e:	88 bb       	out	0x18, r24	; 24
 110:	f6 cf       	rjmp	.-20     	; 0xfe <main+0xc>

00000112 <_exit>:
 112:	f8 94       	cli

00000114 <__stop_program>:
 114:	ff cf       	rjmp	.-2      	; 0x114 <__stop_program>
